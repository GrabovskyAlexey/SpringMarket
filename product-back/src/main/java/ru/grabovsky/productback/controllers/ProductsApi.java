/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.grabovsky.productback.controllers;

import ru.grabovsky.productback.dto.MessageDto;
import ru.grabovsky.productback.dto.ProductDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-05T13:33:16.395512+03:00[Europe/Moscow]")
@Validated
@Tag(name = "products", description = "the products API")
public interface ProductsApi {

    default ProductsApiDelegate getDelegate() {
        return new ProductsApiDelegate() {};
    }

    /**
     * POST /products : Add product
     *
     * @param productDto Product Item (required)
     * @return Successfully add product (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "addProduct",
        summary = "Add product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully add product"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addProduct(
        @Parameter(name = "ProductDto", description = "Product Item", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        return getDelegate().addProduct(productDto);
    }


    /**
     * DELETE /products/{id} : Delete product
     *
     * @param id product id (required)
     * @return Successfully delete product (status code 200)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully delete product", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<MessageDto> deleteProduct(
        @Parameter(name = "id", description = "product id", required = true) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteProduct(id);
    }


    /**
     * GET /products : Get all products
     *
     * @return list of all products (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Get all products",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "list of all products", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductDto>> getAllProducts(
        
    ) {
        return getDelegate().getAllProducts();
    }


    /**
     * GET /products/{id} : Get product by id
     *
     * @param id product id (required)
     * @return Get one products (status code 200)
     *         or Bad Request (status code 400)
     *         or Not found product (status code 404)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Get product by id",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Get one products", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found product", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductDto> getProductById(
        @Parameter(name = "id", description = "product id", required = true) @PathVariable("id") Long id
    ) {
        return getDelegate().getProductById(id);
    }


    /**
     * PUT /products : Update product
     *
     * @param productDto Product Item (required)
     * @return Successfully add product (status code 201)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update product",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully add product"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MessageDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateProduct(
        @Parameter(name = "ProductDto", description = "Product Item", required = true) @Valid @RequestBody ProductDto productDto
    ) {
        return getDelegate().updateProduct(productDto);
    }

}
