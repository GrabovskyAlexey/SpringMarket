openapi: 3.0.3
info:
  title: Cart service
  description: Cart service
  version: 1.0.0
servers:
  - url: 'http://localhost:8192/prod-service/api/v1/'
paths:
  /products:
    get:
      summary: Get all products
      operationId: getAllProducts
      tags:
        - products
      responses:
        '200':
          description: list of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
    put:
      summary: Update product
      operationId: updateProduct
      tags:
        - products
      requestBody:
        description: Product Item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '201':
          description: "Successfully add product"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
    post:
      summary: Add product
      operationId: addProduct
      tags:
        - products
      requestBody:
        description: Product Item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
      responses:
        '201':
          description: "Successfully add product"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /products/{id}:
    get:
      summary: Get product by id
      operationId: getProductById
      tags:
        - products
      parameters:
        - name: id
          in: path
          required: true
          description: product id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get one products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
        '404':
          description: Not found product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
    delete:
      summary: Delete product
      operationId: deleteProduct
      tags:
        - products
      parameters:
        - name: id
          in: path
          required: true
          description: product id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: "Successfully delete product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
  /categories:
    get:
      summary: Get all categories
      operationId: getAllCategories
      tags:
        - categories
      responses:
        '200':
          description: list of all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryDto"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDto"
components:
  schemas:
    ProductDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        price:
          type: number
          format: double
        rating:
          type: number
          format: double
        description:
          type: string
        categoryName:
          type: string
    CategoryDto:
      type: object
      properties:
        name:
          type: string
    MessageDto:
      type: object
      properties:
        message:
          type: string
        date:
          type: string
          format: date